plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.4'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'ChungBazi'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  
	// MySQL Connector
	runtimeOnly 'com.mysql:mysql-connector-j'
  
	// Lombok
	annotationProcessor 'org.projectlombok:lombok'
	compileOnly 'org.projectlombok:lombok'
  
	// Swagger (Springdoc OpenAPI)
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
  
	// Firebase Admin
	implementation 'com.google.firebase:firebase-admin:9.2.0'
  
	// Security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-crypto'
  
  // WebClient
  implementation 'org.springframework.boot:spring-boot-starter-webflux'
  
  // Jackson XML (XML->Java)
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.15.2'
  
  // ARM 기반의 칩에 네이티브 라이브러리 설정
	runtimeOnly 'io.netty:netty-resolver-dns-native-macos:4.1.96.Final:osx-aarch_64'
  
	// Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	//Redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
  
  // JSON Web Tokens (JWT) for authentication
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

  // QueryDsl
  implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
  annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
  annotationProcessor "jakarta.annotation:jakarta.annotation-api"
  annotationProcessor "jakarta.persistence:jakarta.persistence-api"
}

tasks.named('test') {
	useJUnitPlatform()
}


def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [generated]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}